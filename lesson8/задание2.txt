2. 
if (!("a" in window)) {
    var a = 1;
}
alert(a);
Выведет undefined, потому что, когда мы в коде используем переменную с идентификатором "а", она становится частью объекта window, условие не выполняется и мы получаем undefined (если бы в кавычках был другой идентификатор, мы бы получили 1).

var b = function a(x) {
    x && a(--x);
};
alert(a);
Код не выведет ничего, получим ошибку, так как мы не можем так обращаться к функции, нужно либо обращаться к ней через b либо с указанием параметра в скобках.

function a(x) {
    return x * 2;
}
var a;
alert(a);
Выведет код функции a, потому что переменная а объявлена и не определена, но она имеет такой же идентификатор, как и функция а(х) и будет восприниматься как обращение к этой функции, так как эта функция не присвоена никакой другой переменной

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);
Выведет 10, так как в теле функции переопределяется значение параметра с индексом 2 при помощи использования массива параметров и что бы не было передано изначально, 2 параметр после команды  arguments[2] = 10; будет равен 10

function a() {
    alert(this);
}
a.call(null);
Выведет window, потому что при вызове функции мы поставили ( ) и не важно что было в них передано (если переданный объект определен), она будет вызываться для объекта window