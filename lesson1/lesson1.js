// task 1
alert('Задание 1');
let celsium = +prompt('Введите температуру в градусах по Цельсию');
let farenheit = (9 / 5) * celsium + 32;
alert(farenheit);

//task 2 method 1
//Нашла этот способ в Интернете, но я не совсем понимаю как он работает. Расскажите о нем на уроке, пожалуйста
alert('Задание 2 смотрите в консоли');
console.log('Method 1. Using b = [a, a = b][0]');
let a = 10, b = 20;
console.log('Before: ' + 'a = ' + a + '; b = ' + b);
b = [a, a = b][0];
console.log('After: ' + 'a = ' + a + '; b = ' + b);
//task 2 method 2
console.log('Method 2. Using math');
a = 10; b = 20;
console.log('Before: ' + 'a = ' + a + '; b = ' + b);
a += b;
b -= a;
b = -b;
a -= b;
console.log('After: ' + 'a = ' + a + '; b = ' + b);

//task 3
alert('Задание 3');
const name = 'Василий';
const admin = name;
alert(admin);

//task 4
alert('Задание 4');
alert('Выражение 1000 + "108" в JS будет приведено к строке вида "1000108", так как в данном языке программирования операция "+" обозначает либо арифметическое сложение, либо конкатенацию строк, но в случае, когда хотя бы один из операндов является строкой, этот символ всегда будет рассматриваться как конкатенация');

//task 5
alert('Задание 5 смотрите в консоли');
console.log('Аттрибуты async и defer тега script предназначены для того, чтобы браузер во время загрузки страницы, дойдя до данного тега, не останавливал дальнейшую обработку страницы в ожидании полной загрузки скрипта. Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он загрузится.Главный плюс этого аттрибута в том, что событие загрузки элементов DOM будет ожидать окончания загрузки скрипта и таким образом, все описанные в скрипте операции с DOM элементами будут отображаться на странице. Атрибут async означает, что скрипт абсолютно независим от остальных элементов на странице.Это означает, что страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.Событие окончания загрузки элементов DOM, а также другие скрипты не ожидают загрузку скриптов с этим аттрибутом.Асинхронные скрипты, в свою очередь, тоже загружаются совершенно независимо от событий и других скриптов. Асинхронные скрипты очень полезны для добавления на страницу сторонних скриптов: счётчиков, рекламы и т.д.');
